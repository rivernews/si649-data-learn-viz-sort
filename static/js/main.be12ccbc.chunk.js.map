{"version":3,"sources":["helpers/random.js","components/animated-sort-bars/animated-sort-bars.jsx","App.js","serviceWorker.js","index.js"],"names":["generateRandomIntegers","start","end","size","arguments","length","undefined","data","i","push","Math","floor","random","AnimatedSortBars","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createBarChart","bind","assertThisInitialized","console","log","_this2","node","dataMax","d3","yScale","domain","range","svgSize","height","selectAll","enter","append","exit","remove","style","attr","d","config","svgAvailSpaceSize","width","padding","_this3","react_default","a","createElement","className","ref","Component","App","shuffle","setState","prevState","RandomHelper","state","animated_sort_bars_AnimatedSortBars","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be12ccbc.chunk.js","sourcesContent":["export function rangeInt(start, end) {\n    return Math.floor(\n        Math.random() * (end - start)\n    ) + start;\n}\n\nexport function generateRandomIntegers (size = 10) {\n    let data = [];\n    for (let i = 0; i < size; i++) {\n        data.push( rangeInt(0, 10) )\n    }\n\n    return data;\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nimport '../../App.scss'\nimport './animated-sort-bars.module.css'\n\nimport * as d3 from 'd3';\n\nexport default class AnimatedSortBars extends Component {\n    constructor(props) {\n        super(props)\n        this.createBarChart = this.createBarChart.bind(this)\n    }\n    componentDidMount() { // Lifecycle: https://reactjs.org/docs/react-component.html#the-component-lifecycle\n        console.log(\"initial...!\");\n        this.createBarChart()\n    }\n    componentDidUpdate() {\n        console.log(\"updating!\");\n        this.createBarChart()\n    }\n    createBarChart() {\n        const node = this.node\n        const dataMax = d3.max(this.props.data)\n        const yScale = d3.scaleLinear()\n            .domain([0, dataMax])\n            .range([0, this.props.svgSize.height])\n            ;\n\n        d3.select(node)\n            .selectAll('rect')\n            .data(this.props.data)\n            .enter()\n            .append('rect')\n\n        d3.select(node)\n            .selectAll('rect')\n            .data(this.props.data)\n            .exit()\n            .remove()\n\n        d3.select(node)\n            .selectAll('rect')\n            .data(this.props.data)\n            .style('fill', '#fe9922')\n            .attr('x', (d, i) => i * 25)\n            .attr('y', (d) => {\n                return this.props.svgSize.height - yScale(d);\n            })\n            .attr('height', d => yScale(d))\n            .attr('width', 25)\n    }\n\n    setupInitialScale() {\n\n        let x = d3.scaleBand()\n            .domain([])\n            .range([0, this.config.svgAvailSpaceSize.width])\n            .padding(0.1);\n    }\n\n    render() {\n        return (\n            <svg className=\"AnimatedSortBarsSVG\" ref={node => this.node = node}\n                width={this.props.svgSize.width} height={this.props.svgSize.height}>\n            </svg>\n        );\n    }\n}\n\n// See https://stackoverflow.com/questions/38363156/static-proptypes-not-working-under-es6\nAnimatedSortBars.propTypes = {\n    svgSize: PropTypes.shape({\n        width: PropTypes.number,\n        height: PropTypes.number\n    }),\n    data: PropTypes.array,\n};","import React, { Component } from 'react';\n\nimport * as RandomHelper from \"./helpers/random\";\n\nimport './App.scss';\n\nimport AnimatedSortBars from \"./components/animated-sort-bars/animated-sort-bars\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: RandomHelper.generateRandomIntegers(30),\n            svgSize: {\n                width: 500,\n                height: 350,\n            }\n        };\n    }\n\n    shuffle = () => {\n        this.setState((prevState) => ({\n            data: RandomHelper.generateRandomIntegers(30)\n        }))\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h2>D3 Board</h2>\n                </header>\n                <div>\n                    <AnimatedSortBars\n                        data={ this.state.data }\n                        svgSize = { this.state.svgSize }\n                    >\n                    </AnimatedSortBars>\n                </div>\n                <div>\n                    <button onClick={this.shuffle}>Hello</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}