{"version":3,"sources":["components/animated-sort-bars/animated-sort-bars.jsx","App.js","helpers/random.js","serviceWorker.js","index.js"],"names":["AnimatedSortBars","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setupInitialScale","x","d3","domain","data","map","d","i","range","svgSize","width","padding","y","dataMax","height","createBarChart","bind","assertThisInitialized","updateBarChart","value","_this$setupInitialSca","xScale","yScale","_this2","bars","node","selectAll","id","t","duration","swapTransition","enter","append","styles","opacity","fill","attrs","rx","bandwidth","ry","transition","exit","class","remove","undefined","highlightedBarIds","find","attr","_this3","react_default","a","createElement","className","ref","Component","App","n","generateRandomData","resetData","setState","prevState","bubbleSortData","slice","selectionSortData","insertionSortData","onStartSortClick","asyncSetState","callback","state","isSorting","then","Promise","all","bubbleSort","selectionSort","insertionSort","bubbleSortHighlightedBarIds","selectionSortHighlightedBarIds","insertionSortHighlightedBarIds","dataRef","length","stateKeyName","getStateDataKeyName","sortingTargetIndex","insertIndex","markBarsByIndexes","asyncWait","sortingTarget","splice","clearMarkedBars","minIndex","j","swap","isSwapped","indexes","sortType","dataKeyName","highlightedBarIdsKeyName","getHighlightedBarIdsKeyName","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","index","push","err","return","arguments","concat","toLowerCase","resolve","reject","defineProperty","index1","index2","temp","assign","_this4","_ref2$callback","callbackAssignedState","milliSecond","setTimeout","start","end","size","Math","ceil","floor","random","RandomHelper","animated_sort_bars_AnimatedSortBars","dist_default","raised","disabled","onClick","console","log","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.312e4a4f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\n// import '../../App.scss'\nimport './animated-sort-bars.module.scss'\n\nimport * as d3 from 'd3';\nimport \"d3-selection-multi\";\n\nexport default class AnimatedSortBars extends Component {\n    dataMax;\n    xScale;\n    yScale;\n    bars;\n\n    constructor(props) {\n        super(props)\n        this.createBarChart = this.createBarChart.bind(this)\n    }\n    componentDidMount() { // Lifecycle: https://reactjs.org/docs/react-component.html#the-component-lifecycle\n        this.createBarChart()\n    }\n    componentDidUpdate() {\n        // this.createBarChart()\n        this.updateBarChart()\n    }\n    \n    createBarChart() {\n        this.dataMax = d3.max(this.props.data.map((d)=>d.value));\n        const { x, y } = this.setupInitialScale();\n        this.xScale = x;\n        this.yScale = y;\n\n        this.updateBarChart();\n    }\n\n    updateBarChart() {\n        // inject data for updates\n        this.bars = d3.select(this.node)\n            .selectAll('rect')\n            .data(this.props.data, (d, i) => {\n                // give each data an identifier so d3 can keep track of\n                return d.id;\n            })\n            ;\n\n        let t = d3.transition().duration(this.props.swapTransition); // cannot reuse across updates, have to regenerate t for tansition(); otherwise duration, ... won't work\n\n        // new\n        this.bars.enter().append('rect')\n            .styles({\n                opacity: 0,\n                fill: \"orange\"\n            })\n            .attrs({\n                rx: this.xScale.bandwidth() * .5,\n                ry: this.xScale.bandwidth() * .5,\n                x: (d, i) => this.xScale(i),\n                y: this.props.svgSize.height,\n                height: 0,\n                width: () => this.xScale.bandwidth()\n            })\n            .transition(t)\n            .styles({\n                opacity: 1,\n            })\n            .attrs({\n                y: (d, i) => {\n                    return this.props.svgSize.height - this.yScale(d.value);\n                },\n                height: d => this.yScale(d.value),\n            })\n\n        // removed\n        this.bars.exit()\n            .attrs({\n                class: \"exit\"\n            })\n            .transition(t)\n            .attrs({\n                height: 0\n            })\n            .styles({\n                opacity: 0\n            })\n            .remove()\n\n        // update existing\n        this.bars\n            .transition(t)\n            .styles({\n                fill: (d, i) => {\n                    let found = this.props.highlightedBarIds.find((id) => d.id === id);\n                    return (found === undefined) ? \"orange\" : \"blue\";\n                }\n            })\n            .attr('x', (d, i) => this.xScale(i))\n            // .attr('x', (d, i) => i * 25)\n            .attr('y', (d) => {\n                return this.props.svgSize.height - this.yScale(d.value);\n            })\n            .attr('height', d => this.yScale(d.value))\n            .attr('width', this.xScale.bandwidth())\n            ;\n\n\n    }\n\n    setupInitialScale = () => {\n        let x = d3.scaleBand()\n            .domain(this.props.data.map((d, i) => i))\n            .range([0, this.props.svgSize.width])\n            .padding(0.1);\n\n        let y = d3.scaleLinear()\n            .domain([0, this.dataMax])\n            .range([0, this.props.svgSize.height])\n            ;\n\n        return {\n            x,\n            y\n        }\n    }\n\n    render() {\n        return (\n            <svg className=\"AnimatedSortBarsSVG\" ref={node => this.node = node}\n                width={this.props.svgSize.width} height={this.props.svgSize.height}>\n            </svg>\n        );\n    }\n}\n\n// See https://stackoverflow.com/questions/38363156/static-proptypes-not-working-under-es6\nAnimatedSortBars.propTypes = {\n    svgSize: PropTypes.shape({\n        width: PropTypes.number,\n        height: PropTypes.number\n    }),\n    data: PropTypes.array,\n    swapTransition: PropTypes.number,\n    highlightedBarIds: PropTypes.arrayOf(PropTypes.string),\n    onSortFinish: PropTypes.func\n};","import React, { Component, } from 'react';\n\nimport * as RandomHelper from \"./helpers/random\";\n\nimport './App.scss';\n\nimport AnimatedSortBars from \"./components/animated-sort-bars/animated-sort-bars\";\n\nimport Button from '@material/react-button/dist';\nimport '@material/react-button/dist/button.css';\n\nclass App extends Component {\n    swapTransition = 10\n    n = 104;\n    range = 240;\n    data = this.generateRandomData();\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSorting: false,\n            bubbleSortData: this.data.slice(0),\n            selectionSortData: this.data.slice(0),\n            insertionSortData: this.data.slice(0),\n            svgSize: {\n                width: 500,\n                height: 250,\n            },\n            bubbleSortHighlightedBarIds: [],\n            selectionSortHighlightedBarIds: [],\n            insertionSortHighlightedBarIds: []\n        };\n    }\n\n    /**\n     * UI Handlers\n     * \n     * \n     */\n\n    resetData = () => {\n        this.data = this.generateRandomData()\n        this.setState((prevState) => ({\n            bubbleSortData: this.data.slice(0),\n            selectionSortData: this.data.slice(0),\n            insertionSortData: this.data.slice(0),\n        }))\n    }\n\n    onStartSortClick = () => {\n        this.asyncSetState({\n            callback: function (state) {\n                state.isSorting = true\n                return state;\n            }\n        })\n            .then(() =>\n                Promise.all([\n                    this.bubbleSort(this.state.bubbleSortData),\n                    this.selectionSort(this.state.selectionSortData),\n                    this.insertionSort(this.state.insertionSortData),\n                ])\n            )\n            .then(() =>\n                this.asyncSetState({\n                    callback: function (state) {\n                        state.isSorting = false\n                        return state;\n                    }\n                })\n            )\n            ;\n    }\n\n    /**\n     * Core Sort ALgorithms\n     * \n     * \n     */\n\n    async insertionSort(dataRef = []) {\n        let n = dataRef.length;\n        let stateKeyName = this.getStateDataKeyName(\"insertion\")\n\n        for (let i = 1; i < n; i++) {\n            let sortingTargetIndex = i;\n            let insertIndex = i - 1;\n            while (insertIndex >= 0 && dataRef[insertIndex].value > dataRef[sortingTargetIndex].value) {\n                await this.markBarsByIndexes([i, insertIndex], \"insertion\")\n                await this.asyncWait(this.swapTransition * 2);\n                insertIndex--;\n            }\n            insertIndex++;\n\n            await this.asyncSetState({\n                callback: function (state) {\n                    let sortingTarget = state[stateKeyName][sortingTargetIndex];\n                    state[stateKeyName].splice(sortingTargetIndex, 1);\n                    state[stateKeyName].splice(insertIndex, 0, sortingTarget);\n                    return state\n                }\n            })\n            await this.asyncWait(this.swapTransition * 2);\n        }\n\n        await this.clearMarkedBars(\"insertion\");\n        return;\n    }\n\n    async selectionSort(dataRef = []) {\n        let n = dataRef.length;\n        if (dataRef.length === 0) return;\n\n        for (let i = 0; i < n - 1; i++) {\n            let minIndex = i;\n            for (let j = i + 1; j < n; j++) {\n                await this.markBarsByIndexes([j, minIndex], \"selection\")\n                await this.asyncWait(this.swapTransition * 2);\n                if (dataRef[j].value < dataRef[minIndex].value) {\n                    minIndex = j;\n                }\n            }\n            await this.markBarsByIndexes([i, minIndex], \"selection\");\n            await this.swap(i, minIndex, \"selection\");\n            await this.asyncWait(this.swapTransition * 2);\n        }\n\n        await this.clearMarkedBars(\"selection\");\n        return;\n    }\n\n    async bubbleSort(dataRef = []) {\n        let n = dataRef.length;\n        if (dataRef.length === 0) return;\n\n        for (let i = 0; i < n; i++) {\n            let isSwapped = false;\n            for (let j = 0; j < n - 1 - i; j++) {\n                await this.markBarsByIndexes([j, j + 1], \"bubble\")\n                await this.asyncWait(this.swapTransition * 2);\n                if (dataRef[j].value > dataRef[j + 1].value) {\n                    await this.swap(j, j + 1, \"bubble\");\n                    isSwapped = true;\n                    await this.asyncWait(this.swapTransition * 2);\n                }\n            }\n            if (!isSwapped) {\n                // console.log(\"short cut!\")\n                break;\n            }\n        }\n        await this.clearMarkedBars(\"bubble\");\n        return;\n    }\n\n    /**\n     * Helper Functions\n     * \n     * \n     */\n\n    async markBarsByIndexes(indexes, sortType) {\n        let dataKeyName = this.getStateDataKeyName(sortType);\n        let highlightedBarIdsKeyName = this.getHighlightedBarIdsKeyName(sortType);\n\n        await this.asyncSetState({\n            callback: function (state) {\n                let highlightedBarIds = []\n                for (let index of indexes) {\n                    highlightedBarIds.push(state[dataKeyName][index].id);\n                }\n                if (sortType) {\n                    state[highlightedBarIdsKeyName] = highlightedBarIds;\n                }\n                return state;\n            }\n        })\n    }\n\n    getStateDataKeyName(sortType = \"\") {\n        return (sortType !== \"\") ? `${sortType.toLowerCase()}SortData` : null;\n    }\n\n    getHighlightedBarIdsKeyName(sortType = \"\") {\n        return (sortType !== \"\") ? `${sortType}SortHighlightedBarIds` : null;\n    }\n\n    async clearMarkedBars(sortType) {\n        return new Promise((resolve, reject) => {\n            this.setState((state) => {\n                resolve()\n                return {\n                    [this.getHighlightedBarIdsKeyName(sortType)]: []\n                }\n            });\n        });\n    }\n\n    async swap(index1, index2, sortType) {\n        let dataKeyName = this.getStateDataKeyName(sortType);\n        await this.asyncSetState({\n            callback: function (state) {\n                let temp = Object.assign(state[dataKeyName][index1])\n                state[dataKeyName][index1] = state[dataKeyName][index2]\n                state[dataKeyName][index2] = temp\n                return state;\n            }\n        });\n        return;\n    }\n\n    asyncSetState({ callback = null } = {}) {\n        return new Promise(resolve => {\n            this.setState((state) => {\n                if (callback !== null) {\n                    let callbackAssignedState = callback(state);\n                    resolve();\n                    return Object.assign(state, callbackAssignedState);\n                }\n            })\n        });\n    }\n\n    asyncWait(milliSecond) {\n        return new Promise(resolve => setTimeout(resolve, milliSecond));\n    }\n\n    generateRandomData() {\n        return RandomHelper.generateRandomIntegers(this.n, this.range);\n    }\n\n    /**\n     * Template\n     * \n     * \n     */\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h2>Basic Sort Algorithms Viz</h2>\n                </header>\n                <div className=\"App-content\">\n                    <div className=\"sort-animation-container\">\n                        <div className=\"sort-animation\">\n                            <div className=\"visualization\">\n                                <AnimatedSortBars\n                                    data={this.state.bubbleSortData}\n                                    svgSize={this.state.svgSize}\n                                    swapTransition={this.swapTransition}\n                                    highlightedBarIds={this.state.bubbleSortHighlightedBarIds}\n                                >\n                                </AnimatedSortBars>\n                            </div>\n                            <div className=\"header\">\n                                <span>Bubble Sort</span>\n                            </div>\n                        </div>\n                        <div className=\"sort-animation\">\n                            <div className=\"visualization\">\n                                <AnimatedSortBars\n                                    data={this.state.selectionSortData}\n                                    svgSize={this.state.svgSize}\n                                    swapTransition={this.swapTransition}\n                                    highlightedBarIds={this.state.selectionSortHighlightedBarIds}\n                                >\n                                </AnimatedSortBars>\n                            </div>\n                            <div className=\"header\">\n                                <span>Selection Sort</span>\n                            </div>\n                        </div>\n                        <div className=\"sort-animation\">\n                            <div className=\"visualization\">\n                                <AnimatedSortBars\n                                    data={this.state.insertionSortData}\n                                    svgSize={this.state.svgSize}\n                                    swapTransition={this.swapTransition}\n                                    highlightedBarIds={this.state.insertionSortHighlightedBarIds}>\n                                </AnimatedSortBars>\n                            </div>\n                            <div className=\"header\">\n                                <span>Insertion Sort</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"action-container\" >\n                        <Button\n                            className=\"action-button\"\n                            raised\n                            disabled={this.state.isSorting}\n                            onClick={this.onStartSortClick}>\n                            Start\n                        </Button>\n                        <Button\n                            className=\"action-button\"\n                            raised\n                            disabled={this.state.isSorting}\n                            onClick={this.resetData}>\n                            Reset\n                        </Button>\n                        <Button\n                            className=\"action-button\"\n                            raised\n                            onClick={() => console.log('clicked!')}>\n                            Click Me!\n                        </Button>\n                    </div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","export function rangeInt(start, end) {\n    return Math.floor(\n        Math.random() * (end - start)\n    ) + start;\n}\n\nexport function generateRandomIntegers (size = 10, range = 10) {\n    let data = [];\n    for (let i = 0; i < size; i++) {\n        data.push( {\n            id: `id-${i}`,\n            value: rangeInt( Math.ceil(range * .1), range),\n        } )\n    }\n\n    return data;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}