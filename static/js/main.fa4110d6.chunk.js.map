{"version":3,"sources":["components/animated-sort-bars/animated-sort-bars.jsx","App.js","helpers/random.js","serviceWorker.js","index.js"],"names":["AnimatedSortBars","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setupInitialScale","x","d3","domain","data","map","d","id","range","svgSize","width","padding","y","dataMax","height","createBarChart","bind","assertThisInitialized","_this2","node","value","_this$setupInitialSca","xScale","yScale","bars","selectAll","i","t","duration","swapTransition","enter","append","styles","opacity","fill","attrs","rx","ry","bandwidth","transition","exit","class","remove","undefined","highlightedBarIds","find","attr","_this3","react_default","a","createElement","className","ref","Component","App","resetData","setState","prevState","generateData","onStartSortClick","bubbleSort","state","start","end","size","arguments","length","push","concat","Math","floor","random","RandomHelper","j","n","swap","clearMarkedBars","Promise","resolve","reject","index1","index2","setTimeout","temp","assign","animated_sort_bars_AnimatedSortBars","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fa4110d6.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nimport '../../App.scss'\nimport './animated-sort-bars.module.css'\n\nimport * as d3 from 'd3';\nimport \"d3-selection-multi\";\n\nexport default class AnimatedSortBars extends Component {\n    dataMax;\n\n    constructor(props) {\n        super(props)\n        this.createBarChart = this.createBarChart.bind(this)\n    }\n    componentDidMount() { // Lifecycle: https://reactjs.org/docs/react-component.html#the-component-lifecycle\n        this.createBarChart()\n    }\n    componentDidUpdate() {\n        this.createBarChart()\n    }\n    createBarChart() {\n        const node = this.node\n        this.dataMax = d3.max(this.props.data.map((d)=>d.value));\n        const { x: xScale, y: yScale } = this.setupInitialScale();\n\n        // inject data\n        let bars = d3.select(node)\n            .selectAll('rect')\n            .data(this.props.data, (d, i) => {\n                // give each data an identifier so d3 can keep track of\n                return d.id;\n            })\n            ;\n\n        let t = d3.transition().duration(this.props.swapTransition); // cannot reuse across updates, have to regenerate t for tansition(); otherwise duration, ... won't work\n\n        // new\n        bars.enter().append('rect')\n            .styles({\n                opacity: 0,\n                fill: \"orange\"\n            })\n            .attrs({\n                rx: 5,\n                ry: 5,\n                x: (d) => xScale(d.id),\n                y: this.props.svgSize.height,\n                height: 0,\n                width: () => xScale.bandwidth()\n            })\n            .transition(t)\n            .styles({\n                opacity: 1,\n            })\n            .attrs({\n                y: (d, i) => {\n                    return this.props.svgSize.height - yScale(d.value);\n                },\n                height: d => yScale(d.value),\n            })\n\n        // removed\n        bars.exit()\n            .attrs({\n                class: \"exit\"\n            })\n            .transition(t)\n            .attrs({\n                height: 0\n            })\n            .styles({\n                opacity: 0\n            })\n            .remove()\n\n        // update existing\n        bars\n            .transition(t)\n            .styles({\n                fill: (d, i) => {\n                    let found = this.props.highlightedBarIds.find((id) => d.id === id);\n                    return (found === undefined) ? \"orange\" : \"blue\";\n                }\n            })\n            .attr('x', (d, i) => xScale(d.id))\n            // .attr('x', (d, i) => i * 25)\n            .attr('y', (d) => {\n                return this.props.svgSize.height - yScale(d.value);\n            })\n            .attr('height', d => yScale(d.value))\n            .attr('width', xScale.bandwidth())\n            ;\n\n\n    }\n\n    setupInitialScale = () => {\n        let x = d3.scaleBand()\n            .domain(this.props.data.map((d) => d.id))\n            .range([0, this.props.svgSize.width])\n            .padding(0.1);\n\n        let y = d3.scaleLinear()\n            .domain([0, this.dataMax])\n            .range([0, this.props.svgSize.height])\n            ;\n\n        return {\n            x,\n            y\n        }\n    }\n\n    render() {\n        return (\n            <svg className=\"AnimatedSortBarsSVG\" ref={node => this.node = node}\n                width={this.props.svgSize.width} height={this.props.svgSize.height}>\n            </svg>\n        );\n    }\n}\n\n// See https://stackoverflow.com/questions/38363156/static-proptypes-not-working-under-es6\nAnimatedSortBars.propTypes = {\n    svgSize: PropTypes.shape({\n        width: PropTypes.number,\n        height: PropTypes.number\n    }),\n    data: PropTypes.array,\n    swapTransition: PropTypes.number,\n    highlightedBarIds: PropTypes.arrayOf(PropTypes.number)\n};","import React, { Component } from 'react';\n\nimport * as RandomHelper from \"./helpers/random\";\n\nimport './App.scss';\n\nimport AnimatedSortBars from \"./components/animated-sort-bars/animated-sort-bars\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.generateData(),\n            svgSize: {\n                width: 900,\n                height: 350,\n            },\n            swapTransition: 200,\n            highlightedBarIds: []\n        };\n    }\n\n    resetData = () => {\n        this.setState((prevState) => ({\n            data: this.generateData()\n        }))\n    }\n\n    generateData() {\n        return RandomHelper.generateRandomIntegers(20, 40);\n    }\n\n    onStartSortClick = () => {\n        this.bubbleSort();\n    }\n\n    async bubbleSort() {\n        let i = 0, j = 0, n = this.state.data.length;\n\n        if (this.state.data.length === 0) return;\n\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n - 1; j++) {\n                if (this.state.data[j].value > this.state.data[j + 1].value) {\n                    await this.swap(j, j + 1);\n                }\n            }\n        }\n\n        await this.clearMarkedBars();\n    }\n\n    async clearMarkedBars() {\n        return new Promise((resolve, reject) => {\n            this.setState((state) => {\n                resolve()\n                return {\n                    highlightedBarIds: []\n                }\n            });\n        });\n    }\n\n    async swap (index1, index2) {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                this.setState((state) => {\n                    let temp = Object.assign(state.data[index1])\n                    state.data[index1] = state.data[index2]\n                    state.data[index2] = temp\n                    state.highlightedBarIds = [\n                        state.data[index1].id,\n                        state.data[index2].id\n                    ]\n                    \n                    resolve();\n                    return state;\n                });\n            }, this.state.swapTransition * 2);\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h2>D3 Board</h2>\n                </header>\n                <div>\n                    <AnimatedSortBars\n                        data={this.state.data}\n                        svgSize={this.state.svgSize}\n                        swapTransition={this.state.swapTransition}\n                        highlightedBarIds={this.state.highlightedBarIds}\n                    >\n                    </AnimatedSortBars>\n                </div>\n                <div>\n                    <button onClick={this.resetData}>Reset Dataset</button>\n                    <button onClick={this.onStartSortClick}>Start Sort</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","export function rangeInt(start, end) {\n    return Math.floor(\n        Math.random() * (end - start)\n    ) + start;\n}\n\nexport function generateRandomIntegers (size = 10, range = 10) {\n    let data = [];\n    for (let i = 0; i < size; i++) {\n        data.push( {\n            id: `haha-${i}`,\n            value: rangeInt(0, range),\n        } )\n    }\n\n    return data;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}