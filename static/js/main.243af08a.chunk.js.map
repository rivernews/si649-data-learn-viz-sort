{"version":3,"sources":["helpers/random.js","components/animated-sort-bars/animated-sort-bars.jsx","App.js","serviceWorker.js","index.js"],"names":["generateRandomIntegers","start","end","size","arguments","length","undefined","range","data","i","push","id","concat","value","Math","floor","random","console","log","AnimatedSortBars","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setupInitialScale","x","d3","domain","map","d","svgSize","width","padding","y","dataMax","height","createBarChart","bind","assertThisInitialized","_this2","node","_this$setupInitialSca","xScale","yScale","bars","selectAll","t","duration","enter","append","styles","opacity","fill","attrs","rx","ry","bandwidth","transition","exit","class","remove","attr","_this3","react_default","a","createElement","className","ref","Component","App","setState","prevState","RandomHelper","shuffle","sort","b","state","animated_sort_bars_AnimatedSortBars","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.243af08a.chunk.js","sourcesContent":["export function rangeInt(start, end) {\n    return Math.floor(\n        Math.random() * (end - start)\n    ) + start;\n}\n\nexport function generateRandomIntegers (size = 10, range = 10) {\n    let data = [];\n    for (let i = 0; i < size; i++) {\n        data.push( {\n            id: `haha-${i}`,\n            value: rangeInt(0, range),\n        } )\n    }\n\n    console.log(\"generated\", data);\n    return data;\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nimport '../../App.scss'\nimport './animated-sort-bars.module.css'\n\nimport * as d3 from 'd3';\nimport \"d3-selection-multi\";\n\nexport default class AnimatedSortBars extends Component {\n    dataMax;\n\n    constructor(props) {\n        super(props)\n        this.createBarChart = this.createBarChart.bind(this)\n    }\n    componentDidMount() { // Lifecycle: https://reactjs.org/docs/react-component.html#the-component-lifecycle\n        this.createBarChart()\n    }\n    componentDidUpdate() {\n        this.createBarChart()\n    }\n    createBarChart() {\n        const node = this.node\n        this.dataMax = d3.max(this.props.data.map((d)=>d.value));\n        const { x: xScale, y: yScale } = this.setupInitialScale();\n\n        // inject data\n        let bars = d3.select(node)\n            .selectAll('rect')\n            .data(this.props.data, (d, i) => {\n                // give each data an identifier so d3 can keep track of\n                return d.id;\n            })\n            ;\n\n        let t = d3.transition().duration(800); // cannot reuse across updates, have to regenerate t for tansition(); otherwise duration, ... won't work\n\n        // new\n        bars.enter().append('rect')\n            .styles({\n                opacity: 0,\n                fill: \"orange\"\n            })\n            .attrs({\n                rx: 5,\n                ry: 5,\n                x: (d) => xScale(d.id),\n                y: this.props.svgSize.height,\n                height: 0,\n                width: () => xScale.bandwidth()\n            })\n            .transition(t)\n            .styles({\n                opacity: 1,\n            })\n            .attrs({\n                y: (d, i) => {\n                    return this.props.svgSize.height - yScale(d.value);\n                },\n                height: d => yScale(d.value),\n            })\n\n        // removed\n        bars.exit()\n            .attrs({\n                class: \"exit\"\n            })\n            .transition(t)\n            .attrs({\n                height: 0\n            })\n            .styles({\n                opacity: 0\n            })\n            .remove()\n\n        // update existing\n        bars\n            .transition(t)\n            // .style('fill', 'orange')\n            .attr('x', (d, i) => xScale(d.id))\n            // .attr('x', (d, i) => i * 25)\n            .attr('y', (d) => {\n                return this.props.svgSize.height - yScale(d.value);\n            })\n            .attr('height', d => yScale(d.value))\n            .attr('width', xScale.bandwidth())\n            ;\n\n\n    }\n\n    setupInitialScale = () => {\n        let x = d3.scaleBand()\n            .domain(this.props.data.map((d) => d.id))\n            .range([0, this.props.svgSize.width])\n            .padding(0.1);\n\n        let y = d3.scaleLinear()\n            .domain([0, this.dataMax])\n            .range([0, this.props.svgSize.height])\n            ;\n\n        return {\n            x,\n            y\n        }\n    }\n\n    render() {\n        return (\n            <svg className=\"AnimatedSortBarsSVG\" ref={node => this.node = node}\n                width={this.props.svgSize.width} height={this.props.svgSize.height}>\n            </svg>\n        );\n    }\n}\n\n// See https://stackoverflow.com/questions/38363156/static-proptypes-not-working-under-es6\nAnimatedSortBars.propTypes = {\n    svgSize: PropTypes.shape({\n        width: PropTypes.number,\n        height: PropTypes.number\n    }),\n    data: PropTypes.array,\n};","import React, { Component } from 'react';\n\nimport * as RandomHelper from \"./helpers/random\";\n\nimport './App.scss';\n\nimport AnimatedSortBars from \"./components/animated-sort-bars/animated-sort-bars\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: RandomHelper.generateRandomIntegers(400, 40),\n            svgSize: {\n                width: 900,\n                height: 350,\n            }\n        };\n    }\n\n    random = () => {\n        this.setState((prevState) => ({\n            data: RandomHelper.generateRandomIntegers(400, 40)\n        }))\n    }\n\n    shuffle = () => {\n        this.setState((prevState) => ({\n            data: prevState.data.sort((a, b) => {\n                return (a.value - b.value > 0) ? 1: -1 ;\n            })\n        }))\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h2>D3 Board</h2>\n                </header>\n                <div>\n                    <AnimatedSortBars\n                        data={ this.state.data }\n                        svgSize = { this.state.svgSize }\n                    >\n                    </AnimatedSortBars>\n                </div>\n                <div>\n                    <button onClick={this.random}>Random</button>\n                    <button onClick={this.shuffle}>Sort</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}