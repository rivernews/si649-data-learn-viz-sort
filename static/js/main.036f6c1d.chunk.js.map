{"version":3,"sources":["helpers/data-generator.js","components/animated-sort-bars/animated-sort-bars.jsx","components/n-scale-slider/n-scale-slider.jsx","App.js","serviceWorker.js","index.js","components/n-scale-slider/n-scale-slider.module.scss"],"names":["generateRandomIntegers","start","end","size","arguments","length","undefined","range","data","i","push","id","concat","value","Math","ceil","floor","random","generateSortedReverseIntegers","sort","a","b","AnimatedSortBars","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setupInitialScale","x","d3","domain","map","d","svgSize","width","padding","y","dataMax","height","createBarChart","bind","assertThisInitialized","updateBarChart","_this2","_this$setupInitialSca","xScale","yScale","bars","node","selectAll","t","duration","swapTransition","enter","append","styles","opacity","fill","attrs","rx","bandwidth","ry","transition","exit","class","remove","highlightedBarIds","find","attr","_this3","react_default","createElement","className","ref","Component","NScaleSlider","state","scale","datasetType","handleRadioChange","$event","radioStringValue","target","setState","onSlideChange","handleDatasetRadioChange","onDatasetChange","scaleControlContainer","FormControl_default","component","FormLabel_default","RadioGroup_default","aria-label","name","onChange","scaleOptions","option","FormControlLabel_default","key","disabled","control","Radio_default","label","FormHelperText_default","datasetOptions","uid","SortAnimation","Array","isArray","animated_sort_bars_AnimatedSortBars","App","resetData","generateNewDataForAllSort","onStartSortClick","asyncSetState","callback","isSorting","then","Promise","all","bubbleSort","bubbleSortData","selectionSort","selectionSortData","insertionSort","insertionSortData","onNScaleSlideChange","updateDataset","onDatasetTypeChange","bubbleSortHighlightedBarIds","selectionSortHighlightedBarIds","insertionSortHighlightedBarIds","newDataSets","dataRef","n","stateKeyName","getStateDataKeyName","sortingTargetIndex","insertIndex","markBarsByIndexes","asyncWait","sortingTarget","splice","clearMarkedBars","minIndex","j","swap","isSwapped","indexes","sortType","dataKeyName","highlightedBarIdsKeyName","getHighlightedBarIdsKeyName","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","index","err","return","toLowerCase","resolve","reject","defineProperty","index1","index2","temp","assign","_this4","_ref2$callback","callbackAssignedState","milliSecond","setTimeout","DataGenerator","slice","console","log","dist_default","raised","onClick","test","n_scale_slider_NScaleSlider","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.036f6c1d.chunk.js","sourcesContent":["export function rangeInt(start, end) {\n    return Math.floor(\n        Math.random() * (end - start)\n    ) + start;\n}\n\nexport function generateRandomIntegers(size = 10, range = 10) {\n    let data = [];\n    for (let i = 0; i < size; i++) {\n        data.push({\n            id: `id-${i}`,\n            value: rangeInt(Math.ceil(range * .1), range),\n        })\n    }\n\n    return data;\n}\n\nexport function generateSortedIntegers(size = 10, range = 10) {\n    let data = generateRandomIntegers(size, range);\n\n    data.sort((a, b) => {\n        return (a.value > b.value) ? 1 : -1;\n    });\n\n    return data\n}\n\nexport function generateSortedReverseIntegers(size = 10, range = 10) {\n    let data = generateRandomIntegers(size, range);\n\n    data.sort((a, b) => {\n        return (a.value > b.value) ? -1 : 1;\n    });\n\n    return data\n}\n\nexport function generateFewUniquesIntegers(size = 10, range = 10) {\n    \n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\n// import '../../App.scss'\nimport './animated-sort-bars.module.scss'\n\nimport * as d3 from 'd3';\nimport \"d3-selection-multi\";\n\nexport default class AnimatedSortBars extends Component {\n    dataMax;\n    xScale;\n    yScale;\n    bars;\n\n    constructor(props) {\n        super(props)\n        this.createBarChart = this.createBarChart.bind(this)\n    }\n    componentDidMount() { // Lifecycle: https://reactjs.org/docs/react-component.html#the-component-lifecycle\n        this.createBarChart()\n    }\n    componentDidUpdate() {\n        this.updateBarChart()\n    }\n\n    createBarChart() {\n        this.updateBarChart();\n    }\n\n    updateBarChart() {\n        // get data\n        this.dataMax = d3.max(this.props.data.map((d) => d.value));\n        const { x, y } = this.setupInitialScale();\n        this.xScale = x;\n        this.yScale = y;\n\n        // inject data to dom for updates\n        this.bars = d3.select(this.node)\n            .selectAll('rect')\n            .data(this.props.data, (d, i) => {\n                // give each data an identifier so d3 can keep track of\n                return d.id;\n            })\n            ;\n\n        let t = d3.transition().duration(this.props.swapTransition); // cannot reuse across updates, have to regenerate t for tansition(); otherwise duration, ... won't work\n\n        // new\n        this.bars.enter().append('rect')\n            .styles({\n                opacity: 0,\n                fill: \"orange\"\n            })\n            .attrs({\n                rx: this.xScale.bandwidth() * .5,\n                ry: this.xScale.bandwidth() * .5,\n                x: (d, i) => this.xScale(i),\n                y: this.props.svgSize.height,\n                height: 0,\n                width: () => this.xScale.bandwidth()\n            })\n            .transition(t)\n            .styles({\n                opacity: 1,\n            })\n            .attrs({\n                y: (d, i) => {\n                    return this.props.svgSize.height - this.yScale(d.value);\n                },\n                height: d => this.yScale(d.value),\n            })\n\n        // removed\n        this.bars.exit()\n            .attrs({\n                class: \"exit\"\n            })\n            .transition(t)\n            .attrs({\n                height: 0\n            })\n            .styles({\n                opacity: 0\n            })\n            .remove()\n\n        // update existing\n        this.bars\n            .attrs({\n                rx: this.xScale.bandwidth() * .5,\n                ry: this.xScale.bandwidth() * .5,\n            })\n            .transition(t)\n            .styles({\n                fill: (d, i) => {\n                    let found = this.props.highlightedBarIds.find((id) => d.id === id);\n                    return (found === undefined) ? \"orange\" : \"blue\";\n                }\n            })\n            .attr('x', (d, i) => this.xScale(i))\n            // .attr('x', (d, i) => i * 25)\n            .attr('y', (d) => {\n                return this.props.svgSize.height - this.yScale(d.value);\n            })\n            .attr('height', d => this.yScale(d.value))\n            .attr('width', this.xScale.bandwidth())\n            ;\n\n\n    }\n\n    setupInitialScale = () => {\n        let x = d3.scaleBand()\n            .domain(this.props.data.map((d, i) => i))\n            .range([0, this.props.svgSize.width])\n            .padding(0.1);\n\n        let y = d3.scaleLinear()\n            .domain([0, this.dataMax])\n            .range([0, this.props.svgSize.height])\n            ;\n\n        return {\n            x,\n            y\n        }\n    }\n\n    render() {\n        return (\n            <svg className=\"AnimatedSortBarsSVG\" ref={node => this.node = node}\n                width={this.props.svgSize.width} height={this.props.svgSize.height}>\n            </svg>\n        );\n    }\n}\n\n// See https://stackoverflow.com/questions/38363156/static-proptypes-not-working-under-es6\nAnimatedSortBars.propTypes = {\n    svgSize: PropTypes.shape({\n        width: PropTypes.number,\n        height: PropTypes.number\n    }),\n    data: PropTypes.array,\n    swapTransition: PropTypes.number,\n    highlightedBarIds: PropTypes.arrayOf(PropTypes.string),\n    onSortFinish: PropTypes.func\n};","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from \"./n-scale-slider.module.scss\"\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nexport default class NScaleSlider extends Component {\n    static propTypes = {\n        // prop: PropTypes,\n        onSlideChange: PropTypes.func,\n        onDatasetChange: PropTypes.func,\n        scale: PropTypes.number,\n        disabled: PropTypes.bool,\n        datasetType: PropTypes.string\n    }\n\n    state = {\n        value: `${this.props.scale}`,\n        datasetType: this.props.datasetType\n    };\n\n    static scaleOptions = [\n        \"10\", \"30\", \"80\", \"200\"\n    ]\n\n    static datasetOptions = [\n        {\n            uid: `random`,\n            label: `Random`,\n        },\n        {\n            uid: `sorted`,\n            label: `Sorted`,\n        },\n        {\n            uid: `sorted-reverse`,\n            label: `Sorted Reverse`,\n        },\n    ]\n\n    constructor(props) {\n        super(props)\n    }\n\n\n    handleRadioChange = $event => {\n        let radioStringValue = $event.target.value;\n        this.setState({\n            value: radioStringValue\n        }, () => {\n            this.props.onSlideChange(+radioStringValue)\n        });\n    }\n\n    handleDatasetRadioChange = $event => {\n        let radioStringValue = $event.target.value;\n        this.setState({\n            datasetType: radioStringValue\n        }, () => {\n            this.props.onDatasetChange(radioStringValue)\n        });\n    }\n\n\n    render() {\n        return (\n            <div className={styles.scaleControlContainer}>\n                <FormControl component=\"fieldset\" >\n                    <FormLabel component=\"legend\">Scale (n)</FormLabel>\n                    <RadioGroup\n                        aria-label=\"scale-n\"\n                        name=\"scalen\"\n                        value={this.state.value}\n                        onChange={this.handleRadioChange}\n                    >\n                        {\n                            NScaleSlider.scaleOptions.map((option, i) => (\n                                <FormControlLabel key={i} disabled={this.props.disabled} value={option} control={<Radio />} label={option} />\n                            ))\n                        }\n                    </RadioGroup>\n                    <FormHelperText>Change a different scale n to see how the sorting time changes.</FormHelperText>\n                </FormControl>\n                <FormControl component=\"fieldset\" >\n                    <FormLabel component=\"legend\">Dataset Type</FormLabel>\n                    <RadioGroup\n                        aria-label=\"dataset-type\"\n                        name=\"datasettype\"\n                        value={this.state.datasetType}\n                        onChange={this.handleDatasetRadioChange}\n                    >\n                        {\n                            NScaleSlider.datasetOptions.map((option) => (\n                                <FormControlLabel key={option.uid} disabled={this.props.disabled} value={option.uid} control={<Radio />} label={option.label} />\n                            ))\n                        }\n                    </RadioGroup>\n                    <FormHelperText>Change a different data set to see how the performance changes for each sorting algorithm.</FormHelperText>\n                </FormControl>\n            </div>\n        )\n    }\n}\n","import React, { Component, } from 'react';\n\nimport * as DataGenerator from \"./helpers/data-generator\";\n\nimport './App.scss';\n\nimport AnimatedSortBars from \"./components/animated-sort-bars/animated-sort-bars\";\nimport NScaleSlider from \"./components/n-scale-slider/n-scale-slider\";\n\nimport Button from '@material/react-button/dist';\nimport '@material/react-button/dist/button.css';\n\nfunction SortAnimation(props) {\n    if (!Array.isArray(props.data) || props.data.length === 0)  {\n        return <div></div> ;\n    }\n\n    return <AnimatedSortBars\n        data={props.data}\n        svgSize={props.svgSize}\n        swapTransition={props.swapTransition}\n        highlightedBarIds={props.highlightedBarIds}\n    >\n    </AnimatedSortBars>\n}\n\nclass App extends Component {\n    swapTransition = 10\n    \n    data = [];\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSorting: false,\n            scale: 10,  \n            range: 240,\n            svgSize: {\n                width: 500,\n                height: 250,\n            },\n            datasetType: \"random\",\n            bubbleSortData: [],\n            selectionSortData: [],\n            insertionSortData: [],\n            bubbleSortHighlightedBarIds: [],\n            selectionSortHighlightedBarIds: [],\n            insertionSortHighlightedBarIds: [],          \n        };\n    }\n\n    componentDidMount() {\n        this.setState(this.generateNewDataForAllSort(this.state.range))\n    }\n    componentDidUpdate() {\n    }\n\n    /**\n     * UI Handlers\n     * \n     * \n     */\n\n    resetData = () => {\n        this.setState(this.generateNewDataForAllSort(this.state.range))\n    }\n\n    onStartSortClick = () => {\n        this.asyncSetState({\n            callback: function (state) {\n                state.isSorting = true\n                return state;\n            }\n        })\n            .then(() =>\n                Promise.all([\n                    this.bubbleSort(this.state.bubbleSortData),\n                    this.selectionSort(this.state.selectionSortData),\n                    this.insertionSort(this.state.insertionSortData),\n                ])\n            )\n            .then(() =>\n                this.asyncSetState({\n                    callback: function (state) {\n                        state.isSorting = false\n                        return state;\n                    }\n                })\n            )\n            ;\n    }\n\n    onNScaleSlideChange = $event => {\n        let scale = $event;\n        this.setState({\n            scale,\n        }, () => {\n            this.updateDataset(\n                this.generateNewDataForAllSort(this.state.range)\n            )\n        });\n        ;\n    }\n\n    onDatasetTypeChange = $event => {\n        let datasetType = $event;\n        this.setState({\n            datasetType,\n        }, () => {\n            this.updateDataset(\n                this.generateNewDataForAllSort(this.state.range)\n            );\n        });\n    }\n\n    updateDataset(newDataSets) {\n        this.setState({\n            bubbleSortData: newDataSets.bubbleSortData,\n            selectionSortData: newDataSets.selectionSortData,\n            insertionSortData: newDataSets.insertionSortData\n        });\n    }\n\n    /**\n     * Core Sort ALgorithms\n     * \n     * \n     */\n\n    async insertionSort(dataRef = []) {\n        let n = dataRef.length;\n        let stateKeyName = this.getStateDataKeyName(\"insertion\")\n\n        for (let i = 1; i < n; i++) {\n            let sortingTargetIndex = i;\n            let insertIndex = i - 1;\n            while (insertIndex >= 0 && dataRef[insertIndex].value > dataRef[sortingTargetIndex].value) {\n                await this.markBarsByIndexes([i, insertIndex], \"insertion\")\n                await this.asyncWait(this.swapTransition * 2);\n                insertIndex--;\n            }\n            insertIndex++;\n\n            await this.asyncSetState({\n                callback: function (state) {\n                    let sortingTarget = state[stateKeyName][sortingTargetIndex];\n                    state[stateKeyName].splice(sortingTargetIndex, 1);\n                    state[stateKeyName].splice(insertIndex, 0, sortingTarget);\n                    return state\n                }\n            })\n            await this.asyncWait(this.swapTransition * 2);\n        }\n\n        await this.clearMarkedBars(\"insertion\");\n        return;\n    }\n\n    async selectionSort(dataRef = []) {\n        let n = dataRef.length;\n        if (dataRef.length === 0) return;\n\n        for (let i = 0; i < n - 1; i++) {\n            let minIndex = i;\n            for (let j = i + 1; j < n; j++) {\n                await this.markBarsByIndexes([j, minIndex], \"selection\")\n                await this.asyncWait(this.swapTransition * 2);\n                if (dataRef[j].value < dataRef[minIndex].value) {\n                    minIndex = j;\n                }\n            }\n            await this.markBarsByIndexes([i, minIndex], \"selection\");\n            await this.swap(i, minIndex, \"selection\");\n            await this.asyncWait(this.swapTransition * 2);\n        }\n\n        await this.clearMarkedBars(\"selection\");\n        return;\n    }\n\n    async bubbleSort(dataRef = []) {\n        let n = dataRef.length;\n        if (dataRef.length === 0) return;\n\n        for (let i = 0; i < n; i++) {\n            let isSwapped = false;\n            for (let j = 0; j < n - 1 - i; j++) {\n                await this.markBarsByIndexes([j, j + 1], \"bubble\")\n                await this.asyncWait(this.swapTransition * 2);\n                if (dataRef[j].value > dataRef[j + 1].value) {\n                    await this.swap(j, j + 1, \"bubble\");\n                    isSwapped = true;\n                    await this.asyncWait(this.swapTransition * 2);\n                }\n            }\n            if (!isSwapped) {\n                break;\n            }\n        }\n        await this.clearMarkedBars(\"bubble\");\n        return;\n    }\n\n    /**\n     * Helper Functions\n     * \n     * \n     */\n\n    async markBarsByIndexes(indexes, sortType) {\n        let dataKeyName = this.getStateDataKeyName(sortType);\n        let highlightedBarIdsKeyName = this.getHighlightedBarIdsKeyName(sortType);\n\n        await this.asyncSetState({\n            callback: function (state) {\n                let highlightedBarIds = []\n                for (let index of indexes) {\n                    highlightedBarIds.push(state[dataKeyName][index].id);\n                }\n                if (sortType) {\n                    state[highlightedBarIdsKeyName] = highlightedBarIds;\n                }\n                return state;\n            }\n        })\n    }\n\n    getStateDataKeyName(sortType = \"\") {\n        return (sortType !== \"\") ? `${sortType.toLowerCase()}SortData` : null;\n    }\n\n    getHighlightedBarIdsKeyName(sortType = \"\") {\n        return (sortType !== \"\") ? `${sortType}SortHighlightedBarIds` : null;\n    }\n\n    async clearMarkedBars(sortType) {\n        return new Promise((resolve, reject) => {\n            this.setState((state) => {\n                resolve()\n                return {\n                    [this.getHighlightedBarIdsKeyName(sortType)]: []\n                }\n            });\n        });\n    }\n\n    async swap(index1, index2, sortType) {\n        let dataKeyName = this.getStateDataKeyName(sortType);\n        await this.asyncSetState({\n            callback: function (state) {\n                let temp = Object.assign(state[dataKeyName][index1])\n                state[dataKeyName][index1] = state[dataKeyName][index2]\n                state[dataKeyName][index2] = temp\n                return state;\n            }\n        });\n        return;\n    }\n\n    asyncSetState({ callback = null } = {}) {\n        return new Promise(resolve => {\n            this.setState((state) => {\n                if (callback !== null) {\n                    let callbackAssignedState = callback(state);\n                    resolve();\n                    return Object.assign(state, callbackAssignedState);\n                }\n            })\n        });\n    }\n\n    asyncWait(milliSecond) {\n        return new Promise(resolve => setTimeout(resolve, milliSecond));\n    }\n\n    generateNewDataForAllSort(range) {\n        let n = this.state.scale;\n        let data = []\n        if (this.state.datasetType === \"random\") {\n            data = DataGenerator.generateRandomIntegers(n, range);\n        }\n        else if (this.state.datasetType === \"sorted\") {\n            data = DataGenerator.generateSortedIntegers(n, range);\n        }\n        else if (this.state.datasetType === \"sorted-reverse\") {\n            data = DataGenerator.generateSortedReverseIntegers(n, range);\n        }\n\n        return {\n            bubbleSortData: data.slice(0),\n            selectionSortData: data.slice(0),\n            insertionSortData: data.slice(0),\n        }\n    }\n\n    test() {\n        console.log(\"hehe\", DataGenerator.generateSortedReverseIntegers(20, 30))\n    }\n\n    /**\n     * Template\n     * \n     * \n     */\n\n    \n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h2>Basic Sort Algorithms Viz</h2>\n                </header>\n                <div className=\"App-content\">\n                    <div className=\"sort-animation-container\">\n                        <div className=\"sort-animation\">\n                            <div className=\"visualization\">\n                                <SortAnimation  \n                                    data={this.state.bubbleSortData}\n                                    svgSize={this.state.svgSize}\n                                    swapTransition={this.swapTransition}\n                                    highlightedBarIds={this.state.bubbleSortHighlightedBarIds}\n                                />\n                            </div>\n                            <div className=\"header\">\n                                <span>Bubble Sort</span>\n                            </div>\n                        </div>\n                        <div className=\"sort-animation\">\n                            <div className=\"visualization\">\n                                <SortAnimation\n                                    data={this.state.selectionSortData}\n                                    svgSize={this.state.svgSize}\n                                    swapTransition={this.swapTransition}\n                                    highlightedBarIds={this.state.selectionSortHighlightedBarIds}\n                                />\n                            </div>\n                            <div className=\"header\">\n                                <span>Selection Sort</span>\n                            </div>\n                        </div>\n                        <div className=\"sort-animation\">\n                            <div className=\"visualization\">\n                                <SortAnimation\n                                    data={this.state.insertionSortData}\n                                    svgSize={this.state.svgSize}\n                                    swapTransition={this.swapTransition}\n                                    highlightedBarIds={this.state.insertionSortHighlightedBarIds}\n                                />\n                            </div>\n                            <div className=\"header\">\n                                <span>Insertion Sort</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"user-controls\">\n                        <div className=\"action-container\" >\n                            <Button\n                                className=\"action-button\"\n                                raised\n                                disabled={this.state.isSorting}\n                                onClick={this.onStartSortClick}>\n                                Start\n                            </Button>\n                            <Button\n                                className=\"action-button\"\n                                raised\n                                disabled={this.state.isSorting}\n                                onClick={this.resetData}>\n                                Reset\n                            </Button>\n                            <Button\n                                className=\"action-button\"\n                                raised\n                                onClick={this.test}>\n                                Test\n                            </Button>\n                        </div>\n                        <div className=\"scale-control\">\n                            <NScaleSlider\n                                onSlideChange={this.onNScaleSlideChange}\n                                onDatasetChange={this.onDatasetTypeChange}\n                                scale={this.state.scale}\n                                datasetType={this.state.datasetType}\n                                disabled={this.state.isSorting}>\n                            </NScaleSlider>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scaleControlContainer\":\"n-scale-slider_scaleControlContainer__3lCFQ\"};"],"sourceRoot":""}